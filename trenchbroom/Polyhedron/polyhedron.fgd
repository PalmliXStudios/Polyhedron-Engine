//
// Quake 2 game definition file (.fgd)
//
// Originally written by by autolycus
// Special thanks to: Disruptor, Zoid, Zaphod, Imaginos, and EutecTic.
//
// Lasted updated by xaGe : 20200415

//
// worldspawn
//

// 0302 - added "nextmap" key
@SolidClass = worldspawn : "World entity"
[
	sky(string) : "Environment map name"
	skyaxis(string) : "Vector axis for rotating sky"
	skyrotate(string) : "Speed of rotation (degrees/second)"
	sounds(integer) : "CD Track Number" : 1
	gravity(integer) : "Gravity" : 800
	message(string) : "Level name"
	nextmap(string) : "Next map (DM only)"
]



//-----------------------------------------------------------------------------
// base marker definitions!
//-----------------------------------------------------------------------------
//
// base marker definitions
//model({ "path": ":models/items/keys/target/tris.md2" }) =


@baseclass = Appearflags [
	spawnflags(Flags) =
	[
		256 : "Not in Easy" : 0
		512 : "Not in Normal" : 0
		1024 : "Not in Hard" : 0
		2048 : "Not in Deathmatch" : 0
	]
]
@baseclass = Angle [ angle(integer) : "Direction" ]
@baseclass = Targetname [ targetname(target_source) : "Name" ]
@baseclass = Target [ target(target_destination) : "Target" ]


//-----------------------------------------------------------------------------
// player start, deathmatch, coop, deathmatch intermission
//-----------------------------------------------------------------------------
@baseclass base(Appearflags, Targetname) size(-16 -16 -24, 16 16 32) color(0 255 0) model({ "path": ":players/marine/tris.md2", "frame":0, "skin":1}) = PlayerClass []
@PointClass base(PlayerClass) = info_player_start : "Player 1 start" []
@PointClass base(PlayerClass) = info_player_deathmatch : "Player deathmatch start" []
@PointClass base(PlayerClass) = info_player_coop : "Player cooperative start" []
@PointClass base(PlayerClass) = info_player_intermission : "Deathmatch intermission point"
[
	angles(string) : "pitch yaw roll"
]

// Notes on the 'team' key: First of all, it's really only useful in DM because it creates a
// random respawn pattern. Let's say that in one spot, you want to have the shotgun, Quad
// damage and mega health item to respawn in alternance. Place all of them in approximately
// the same location, team them and voila! The FIRST item that you place in the map will be
// the team MASTER - the others will be SLAVES. In DM play, the Master will be the first one
// to spawn. Once the Master is picked up, the respawn pattern becomes RANDOM: it could be
// the same or one of the other 2. If you try to use this in a Single Player map, it's
// pretty useless because only the team MASTER spawns and the others never appear obviously.



//-----------------------------------------------------------------------------
// Ammo!
//-----------------------------------------------------------------------------
@BaseClass base(Appearflags, Target) color(76 76 255) size(-16 -16 -16, 16 16 16) = Ammo
[
	team(string) : "Team"
]

@PointClass base(Ammo) model({ "path": ":models/items/ammo/shells/medium/tris.md2" }) = ammo_shells : "Shotgun ammo" []
@PointClass base(Ammo) model({ "path": ":models/items/ammo/bullets/medium/tris.md2" }) = ammo_bullets : "Machine/Chain gun ammo" []



//-----------------------------------------------------------------------------
// Functional!
//-----------------------------------------------------------------------------
// Keep in mind when using func_areaportal that it must
// *completely* separate two areas.  otherwise, you will
// get an error message and the areaportal will not work
//
// 0221 - is there any point in a "style" key?
@SolidClass base(Appearflags, Targetname) = func_areaportal : "Area portal (Vis blocker)" []

//"angle"     determines the opening direction
//"target"    all entities with a matching targetName will be used
//"speed"     override the default 40 speed
//"wait"      override the default 1 second wait (-1 = never return)
//"lip"       override the default 4 pixel lip remaining at end of move
//"health"    if set, the button must be killed instead of touched
@SolidClass base(Appearflags, Target, Targetname) color(0 128 204) = func_button : "Button"
[
	pathtarget(string) : "Elevator level target"
	speed(integer) : "Speed" : 40
	wait(choices) : "Wait before reset" : 1 =
	[
		-1 : "Never Return"
	]
	lip(integer) : "Lip remaining after move" : 4
	health(integer) : "Health (shootable)"
	sounds(choices) : "Sounds" : 0 =
	[
		0 : "Audible"
		1 : "Silent"
	]
//	sounds(choices) : "Sounds" : 2 =
//	[
//		1 : "Silent"
//		2 : "Steam Metal"
//		3 : "Wodden Clunk"
//		4 : "Metallic Click"
//		5 : "In-Out"
//	]
	message(string) : "Activation message"
	_minlight(integer) : "Minimum light (optional)"
]

// func_conveyor code is incomplete.  use the surface attribute "flowing"
// and the "current" content flag.  (texture won't scroll)
//
// 0221 - added _minlight
@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_conveyor : "Conveyor belt"
[
	spawnflags(Flags) =
	[
		1 : "Start On" : 0
		2 : "Toggle" : 0
	]
	speed(integer) : "Speed" : 100
	_minlight(integer) : "Minimum light (optional)"
]

// 0221 - updated "sounds" information
// 0221 - added "killtarget"
@SolidClass base(Angle, Appearflags, Targetname, Target) color(0 128 204) = func_door : "Door"
[
	spawnflags(Flags) =
	[
		1 : "Start Open" : 0
		4 : "Crusher" : 0
		8 : "No Monsters" : 0
		16 : "Animated" : 0
		32 : "Toggle" : 0
		64 : "Animated Fast" : 0
	]
	killtarget(string) : "Kill Target"
	team(string) : "Team"
	message(string) : "Trigger message"
	health(integer) : "Health (shootable)"
	speed(integer) : "Speed" : 100
	wait(choices) : "Wait before close" : 3 =
	[
		-1 : "Stay open"
	]
	lip(integer) : "Lip remaining after move" : 8
	dmg(integer) : "Damage when blocked" : 2
	sounds(choices) : "Sounds" : 0 =
	[
		0 : "Audible"
		1 : "Silent"
	]
//	sounds(choices) : "Sounds" : 3 =
//	[
//		1 : "Silent"
//		2 : "Light"
//		3 : "Medium"
//		4 : "Heavy"
//	]
	_minlight(integer) : "Minimum light (optional)"
]

// 0221 - added "killtarget" and "target" keys
// 0221 - updated "sounds" info
// 0221 - removed "lip" key
@SolidClass base(Appearflags, Targetname, Target) color(0 128 204) = func_door_rotating : "Rotating Door"
[
	spawnflags(Flags) =
	[
		1 : "Start Open" : 0
		2 : "Reverse" : 0
		4 : "Crusher" : 0
		8 : "No Monsters" : 0
		16 : "Animated" : 0
		32 : "Toggle" : 0
		64 : "X Axis" : 0
		128 : "Y Axis" : 0
	]
	killtarget(string) : "Kill Target"
	team(string) : "Team"
	distance(integer) : "Degrees of rotation" : 90
	message(string) : "Trigger message"
	health(integer) : "Health (shootable)"
	speed(integer) : "Speed" : 100
	wait(choices) : "Wait before close" : 3 =
	[
		-1 : "Stay open"
	]
	dmg(integer) : "Damage when blocked" : 2
	sounds(choices) : "Sounds" : 0 =
	[
		0 : "Audible"
		1 : "Silent"
	]
//	sounds(choices) : "Sounds" : 3 =
//	[
//		1 : "Silent"
//		2 : "Light"
//		3 : "Medium"
//		4 : "Heavy"
//	]
	_minlight(integer) : "Minimum light (optional)"
]


// not visible in DM mode
//
// 0221 - added "_minlight" key (even tho you dont want it to stand out)
@SolidClass base(Appearflags, Targetname, Target) color(0 128 204) = func_explosive : "Exploding/Breakable brush"
[
	spawnflags(Flags) =
	[
		1 : "Trigger Spawn" : 0
		2 : "Animated" : 0
		4 : "Animated Fast" : 0
	]
	health(integer) : "Health" : 100
	mass(integer) : "Mass (debris)" : 75
	dmg(integer) : "Damage" : 0
	_minlight(integer) : "Minimum light (optional)"
]

@SolidClass base(Appearflags, Targetname) color(255 0 0) = func_killbox : "Instant death" []

// 0221 - added "_minlight" key
@SolidClass base(Appearflags, Targetname) color (0 128 204) = func_object : "Solid bmodel, will fall if its support is removed"
[
	spawnflags(Flags) =
	[
		1 : "Trigger Spawn" : 0
		2 : "Animated" : 0
		4 : "Animated Fast" : 0
	]
	_minlight(integer) : "Minimum light (optional)"
]

// 0221 - removed "sounds" key
@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_plat : "Platform"
[
	spawnflags(Flags) =
	[
		1 : "Plat Low Trigger" : 0
	]
	speed(integer) : "Speed" : 100
	accel(integer) : "Acceleration" : 500
	lip(integer) : "Lip remaining after move" : 8
	height(integer) : "Movement distance"
	_minlight(integer) : "Minimum light (optional)"
]

// 0222 - added "team" key
@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_rotating : "Rotating brush"
[
	spawnflags(Flags) =
	[
		1 : "Start On" : 0
		2 : "Reverse" : 0
		4 : "X Axis" : 0
		8 : "Y Axis" : 0
		16 : "Pain on Touch" : 0
		32 : "Block Stops" : 0
		64 : "Animated" : 0
		128 : "Animated Fast" : 0
	]
	team(string) : "Team"
	speed(integer) : "Speed" : 100
	dmg(integer) : "Damage when blocked" : 2
	_minlight(integer) : "Minimum light (optional)"
]

@PointClass base(Appearflags, Targetname, Target) color(76 25 153) size(-8 -8 -8, 8 8 8) = func_timer : "Timer"
[
	spawnflags(Flags) =
	[
		1 : "Start On" : 0
	]
	wait(integer) : "Base wait time" : 1
	random(integer) : "Wait variance (+/-)"
	delay(integer) : "Delay before first firing"
	pausetime(integer) : "Additional delay"
]

// 0219 - added "team" key
@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_train : "Moving platform"
[
	spawnflags(Flags) =
	[
		1 : "Start On" : 0
		2 : "Toggle" : 0
		4 : "Block Stops" : 0
	]
	target(string) : "First stop target"
	team(string) : "Team"
	speed(integer) : "Speed" : 100
	dmg(integer) : "Damage when blocked" : 2
	noise(string) : "Sound (path/file.wav)"
	_minlight(integer) : "Minimum light (optional)"
]

// 0221 - added a "_minlight" key
@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_wall : "Solid Wall"
[
	spawnflags(Flags) =
	[
		1 : "Trigger Spawn" : 0
		2 : "Toggle" : 0
		4 : "Start On" : 0
		8 : "Animated" : 0
		16 : "Animated Fast" : 0
	]
	_minlight(integer) : "Minimum light (optional)"
]

// must never be transparent?
//
// 0221 - added a "_minlight" key
@SolidClass base(Appearflags, Targetname) color(0 128 204) = func_water : "Moveable water"
[
	spawnflags(Flags) =
	[
		1 : "Start Open" : 0
	]
	speed(integer) : "Speed" : 25
	wait(choices) : "Wait before return" : -1 =
	[
		-1 : "Toggle"
	]
	lip(integer) : "Lip remaining after move"
	sounds(Choices) : "Sounds" : 1 =
	[
		0 : "No Sounds"
		1 : "Water"
		2 : "Lava"
	]
	team(string) : "Team"
	_minlight(integer) : "Minimum light (optional)"
]

@PointClass base(Appearflags, Targetname) color(0 128 0) size(-4 -4 -4, 4 4 4) = info_null : "Spotlight target" []
@PointClass base(info_null) = info_notnull : "Lightning target" []



//-----------------------------------------------------------------------------
// Items!
//-----------------------------------------------------------------------------
@BaseClass base(Appearflags, Target) color(76 76 255) size(-16 -16 -16, 16 16 16) = Items
[
	team(string) : "Team"
]

@PointClass base(Items) model({ "path": ":models/items/armor/body/tris.md2" }) = item_armor_body : "Body armor" []
@PointClass base(Items) model({ "path": ":models/items/healing/medium/tris.md2" }) = item_health : "+10 health" []
@PointClass base(Items) model({ "path": ":models/items/healing/stimpack/tris.md2" }) = item_health_small : "+2 health" []
@PointClass base(Items) model({ "path": ":models/items/healing/large/tris.md2" }) = item_health_large : "+25 health" []
@PointClass base(Items) model({ "path": ":models/items/mega_h/tris.md2" }) = item_health_mega : "+100 health" []



//-----------------------------------------------------------------------------
// Keys!
//
// Empty template, they are nonexistent atm.
//-----------------------------------------------------------------------------
//@BaseClass base(Appearflags, Target) color(0 128 204) size(-16 -16 -16, 16 16 16) = Keys []

//@PointClass base(Keys) model({ "path": ":models/items/keys/target/tris.md2" }) = key_airstrike_target : "Tank commander's head" []
//@PointClass base(Keys) model({ "path": ":models/items/keys/key/tris.md2" }) = key_blue_key : "Normal door key - blue" []
//@PointClass base(Keys) model({ "path": ":models/monsters/commandr/head/tris.md2" }) = key_commander_head : "Tank commander's head" []
// 0301 - added "targetname" key
//@PointClass base(Keys, Targetname) model({ "path": ":models/items/keys/power/tris.md2" }) = key_power_cube : "Warehouse circuits"
//[
//	spawnflags(Flags) =
//	[
//		1 : "Trigger Spawn" : 0
//		2 : "No Touch" : 0
//	]
//]

@PointClass base(Appearflags, Target, Targetname) color(0 255 0) size(-8 -8 -8, 8 8 8) = light : "Light"
[
	spawnflags(Flags) =
	[
		1 : "Start Off" : 0
	]
	light(integer) : "Brightness" : 300
	style(Choices) : "Style (Use >32 for customLightStyle)" : 0 =
	[
		0 : "Normal"
		1 : "Flicker #1"
		6 : "Flicker #2"
		2 : "Slow Strong Pulse"
		3 : "Candle #1"
		7 : "Candle #2"
		8 : "Candle #3"
		4 : "Fast Strobe"
		5 : "Gentle Pulse #1"
		9 : "Slow Strobe"
		10 : "Fluorescent Flicker"
		11 : "Slow pulse, no black"

	]
	customLightStyle(string) : "Fill in a custom lightstyle string (a-m)" : "abcdefghijklmlkjihgfedcba"
	_cone(integer) : "Size of light (spotlight)" : 10
]



//-----------------------------------------------------------------------------
// Misc!
//-----------------------------------------------------------------------------
// 0225 - removed "target" key - id concluded being able to target
// something with a movable barrel was a bug and removed that function :(
@PointClass base(Appearflags, Targetname) color(0 128 204) size(-16 -16 0, 16 16 40) model({ "path": ":models/objects/barrels/tris.md2" }) = misc_explobox : "Large exploding box"
[
	mass(integer) : "Mass" : 100
	health(integer) : "Health" : 80
	dmg(integer) : "Damage" : 150
]

@PointClass base(Appearflags, Targetname) color(0 128 204) size(-16 -16 0, 16 16 40) model({ "path" : model, "frame": startframe, "skin": skin }) = misc_servermodel : "Server side model"
[
	spawnflags(Flags) =
	[
		1 : "Start Off" : 0
		2 : "Pause On End" : 0
		4 : "(Unimplemented) Noise Looped On" : 0
		8 : "(Unimplemented) Noise Looped Off" : 0
		16 : "(Unimplemented) Noise Reliable" : 0
	]

	angles(string) : "Individual rotation control of PITCH, YAW, and ROLL (default: 0 0 0)." 
	noise(string) : "Sound (path/file.wav)"
	attenuation(Choices) : "(Unimplemented) Attenuation" : 1 =
	[
		-1 : "None, send to whole level"
		1 : "Normal fighting sounds"
		2 : "Idle sound level"
		3 : "Ambient sound level"
	]
	volume(integer) : "(Unimplemented) Volume (0.0 - 1.0)" : 1

	endframe(integer) : "End Frame #" : 0
	startframe(integer) : "Start Frame #" : 0

	boundingboxmins(string) : "Min (Bottom Left) BoundingBox coords X Y Z" : "-16 -16 0"
	boundingboxmaxs(string) : "Max (Top Right) boundingbox coords X Y Z" : "16 16 40"

	dmg(integer) : "Damage" : 150
	effects(integer) : "Effects" : 0
	health(integer) : "Health" : 80
	mass(integer) : "Mass" : 100
	model(string) : "Path to Model" : "models/monsters/scrag/scrag.md3" 
	skin(string) : "Path to Skin" : ":models/monsters/scrag/scrag.tga" 
	rendereffects(integer) : "Render Effects" : 0
]

// set angle for gib direction, otherwise it just drops
@PointClass base(Appearflags) color(255 0 0) size(-8 -8 -8, 8 8 8) model({ "path": ":models/objects/gibs/arm/tris.md2" }) = misc_gib_arm : "arm gib, use with target_spawner" []
@PointClass base(Appearflags) color(255 0 0) size(-8 -8 -8, 8 8 8) model({ "path": ":models/objects/gibs/head/tris.md2" }) = misc_gib_head : "head gib, use with target_spawner" []
@PointClass base(Appearflags) color(255 0 0) size(-8 -8 -8, 8 8 8) model({ "path": ":models/objects/gibs/arm/tris.md2" }) = misc_gib_leg : "leg gib, use with target_spawner" []

@PointClass base(Appearflags, Targetname) color(255 0 0) size(-32 -32 -24, 32 32 -16) model({ "path": ":models/objects/dmspot/tris.md2", "skin": 1 }) = misc_teleporter : "Teleporter: To hide the teleport pads, place them units 10 units into a brush."	[	target(string) : "Teleport Destination"	]
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-32 -32 -24, 32 32 -16) model({ "path": ":models/objects/dmspot/tris.md2", "skin": 0 }) = misc_teleporter_dest : "Teleport Destination: To hide the teleport pads, place them units 10 units into a brush." []


//-----------------------------------------------------------------------------
// Monsters!
//-----------------------------------------------------------------------------
@BaseClass base(Appearflags, Target, Targetname) color(255 128 0) size(-16 -16 -24, 16 16 32) = Monsters
[
	spawnflags(Flags) =
	[
		1 : "Ambush" : 0
		2 : "Trigger Spawn" : 0
		4 : "Sight" : 0
	]
	combattarget(string) : "Point combat target"
	deathtarget(string) : "Entity to trigger at death"
	killtarget(string) : "Entity to remove at death"
	item(string) : "Spawn Item"
]

//@PointClass base(Monsters) model({ "path": ":models/monsters/soldier/tris.md2", "skin": 0 }) = monster_soldier_light : "Light Soldier" []
//@PointClass base(Monsters) model({ "path": ":models/monsters/soldier/tris.md2", "skin": 2 }) = monster_soldier : "Soldier" []
//@PointClass base(Monsters) model({ "path": ":models/monsters/soldier/tris.md2", "skin": 4 }) = monster_soldier_ss : "SS Soldier" []

//-----------------------------------------------------------------------------
// Paths!
//-----------------------------------------------------------------------------
// using a "wait" value of -1 on a path corner causes a func_train to go silent between
// itself and the next path corner when the train is restarted. The train's sound will
// resume as soon as it reaches a path corner with a "wait" value other than -1
@PointClass base(Appearflags, Targetname) color(128 76 0) size(-8 -8 -8, 8 8 8) = path_corner : "Path marker"
[
	spawnflags(Flags) =
	[
		1 : "Teleport" : 0
	]
	target(string) : "Next path target"
	pathtarget(string) : "Event to trigger"
	wait(choices) : "Wait" : 0 =
	[
		-1 : "Wait for retrigger"
	]
]

//-----------------------------------------------------------------------------
// Targets!
//-----------------------------------------------------------------------------
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_blaster : "Blaster"
[
	spawnflags(Flags) =
	[
		1 : "No Trail" : 0
		2 : "No Effects" : 0
	]
	dmg(integer) : "Damage" : 15
	speed(integer) : "Speed" : 1000
]

@PointClass base(Appearflags, Targetname, Target) color(128 128 128) size(-8 -8 -8, 8 8 8) = target_crosslevel_trigger : "Cross-level trigger"
[
	spawnflags(Flags) =
	[
		1 : "Trigger 1" : 0
		2 : "Trigger 2" : 0
		4 : "Trigger 3" : 0
		8 : "Trigger 4" : 0
		16 : "Trigger 5" : 0
		32 : "Trigger 6" : 0
		64 : "Trigger 7" : 0
		128 : "Trigger 8" : 0
	]
	killtarget(string) : "Kill Target"
	message(string) : "Message"
	delay(integer) : "Trigger delay"
]

@PointClass base(Appearflags, Targetname, Target) color(128 128 128) size(-8 -8 -8, 8 8 8) = target_crosslevel_target : "Cross-level trigger"
[
	spawnflags(Flags) =
	[
		1 : "Trigger 1" : 0
		2 : "Trigger 2" : 0
		4 : "Trigger 3" : 0
		8 : "Trigger 4" : 0
		16 : "Trigger 5" : 0
		32 : "Trigger 6" : 0
		64 : "Trigger 7" : 0
		128 : "Trigger 8" : 0
	]
	killtarget(string) : "Kill Target"
	delay(integer) : "Trigger delay (if activated)" : 1
]

@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_earthquake : "Level wide earthquake"
[
	speed(integer) : "Severity of quake" : 200
	count(integer) : "Duration" : 5
]

@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_explosion : "Explosion"
[
	delay(integer) : "Delay before explosion"
	dmg(integer) : "Radius damage" : 0
]

// 0221 - added "target" key
@PointClass base(Appearflags, Targetname, Target) color(0 128 204) size(-8 -8 -8, 8 8 8) = target_lightramp : "Light ramp"
[
	spawnflags(Flags) =
	[
		1 : "Toggle" : 0
	]
	speed(integer) : "Speed"
	message(string) : "start/end light level"
]

// set speed and angle, otherwise spawned object drops
//
// 0221 - changed "target" key description for clarity
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_spawner : "Monster/Item spawner"
[
	target(string) : "Monster/Item to spawn"
	speed(integer) : "Speed"
]

// looped sounds are automatically volume 1, attenuation 3 :\
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_speaker : "Sound player"
[
	spawnflags(Flags) =
	[
		1 : "Looped On" : 0
		2 : "Looped Off" : 0
		4 : "Reliable" : 0
	]
	noise(string) : "Sound (path/file.wav)"
	attenuation(Choices) : "Attenuation" : 1 =
	[
		-1 : "None, send to whole level"
		1 : "Normal fighting sounds"
		2 : "Idle sound level"
		3 : "Ambient sound level"
	]
	volume(integer) : "Volume (0.0 - 1.0)" : 1
]

// "sounds" values other than 1 are silent.  leaving in the other
// options for availability to mods/fixes
//
// 0221 - clarified "count" description
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_splash : "Creates a splash when used"
[
	sounds(choices) : "Type of splash" : 2 =
	[
		1 : "Sparks"
		2 : "Blue water"
		3 : "Brown water"
		4 : "Slime"
		5 : "Lava"
		6 : "Blood"
	]
	count(integer) : "Number of pixels in splash (1 - 255)"
	dmg(integer) : "Radius damage"
]

// eye candy... Particles #2 (style 22) is quite cool
@PointClass base(Appearflags, Targetname) color(255 0 0) size(-8 -8 -8, 8 8 8) = target_temp_entity : "Temp entity"
[
	style(choices) : "Style" : 22 =
	[
		20 : "Green Fireball"
		21 : "Particles #1"
		22 : "Particles #2"
	]
]



//-----------------------------------------------------------------------------
// Triggers!
//-----------------------------------------------------------------------------
// 0221 - added "delay" and "killtarget" keys
@PointClass base(Appearflags, Target) color(128 128 128) size(-8 -8 -8, 8 8 8) = trigger_always : "Always triggers"
[
	killtarget(string) : "Kill Target"
	delay(integer) : "Time before triggering"
]

@SolidClass base(Appearflags, Targetname, Target) color(128 128 128) = trigger_counter : "Counter"
[
	spawnflags(Flags) =
	[
		1 : "No Message" : 0
	]
	count(integer) : "Count before trigger" : 2
]

@PointClass base(Appearflags, Targetname, Target) color(76 25 153) = trigger_elevator : "Elevator trigger" []

@SolidClass base(Appearflags) color(128 128 128) = trigger_gravity : "Change gravity"
[
	gravity(integer) : "Gravity (standard = 1.0)" : 1
]

@SolidClass base(Appearflags, Targetname) color(128 128 128) = trigger_hurt : "Hurts on touch"
[
	spawnflags(Flags) =
	[
		1 : "Start Off" : 0
		2 : "Toggle" : 0
		4 : "Silent" : 0
		8 : "No Protection" : 0
		16 : "Slow hurt" : 0
	]
	dmg(integer) : "Damage" : 5
]

@PointClass base(Appearflags, Targetname, Target) color(128 128 128) size(-8 -8 -8, 8 8 8) = trigger_key : "Triggers with key"
[
	killtarget(string) : "Kill target"
	item(string) : "Item classname" : "key_blue_key"
]

@SolidClass base(Appearflags) color(128 128 128) = trigger_monsterjump : "Makes monsters jump"
[
	speed(integer) : "Speed thrown forward" : 200
	height(integer) : "Height thrown upward" : 200
]

// 0221 - switched around _relay, _once, and _multiple
@PointClass base(Appearflags, Targetname, Target) color(128 128 128) = trigger_relay : "Relay trigger"
[
	killtarget(string) : "Kill Target"
	delay(integer) : "Time before triggering"
	message(string) : "Trigger message"
]

// 0303 - removed "sounds" key
@SolidClass base(trigger_relay) = trigger_once : "Single fire trigger"
[
	spawnflags(Flags) =
	[
		4 : "Triggered" : 0
	]
]

@SolidClass base(trigger_once) = trigger_multiple : "Multiple fire trigger"
[
	spawnflags(Flags) =
	[
		1 : "Monster" : 0
		2 : "Not Player" : 0
	]
	wait(integer) : "Seconds between triggers" : 0
]

@SolidClass base(Appearflags) color(128 128 128) = trigger_push : "Push trigger"
[
	spawnflags(Flags) =
	[
		1 : "Push Once" : 0
	]
	speed(integer) : "Speed of push" : 1000
]

@PointClass base(Appearflags) color(0 128 204) size(-8 -8 -8, 8 8 8) = viewthing : "Just for debugging level - dont use" []
@BaseClass base(Appearflags, Target) color(76 76 255) size(-16 -16 -16, 16 16 16) = Weapons
[
	team(string) : "Team"
]

//-----------------------------------------------------------------------------
// Weapons!
//-----------------------------------------------------------------------------
@PointClass base(Weapons) model({ "path": ":models/weapons/g_shotg/tris.md2" }) = weapon_shotgun : "Shotgun" []
@PointClass base(Weapons) model({ "path": ":models/weapons/g_shotg2/tris.md2" }) = weapon_supershotgun : "Super shotgun" []
@PointClass base(Weapons) model({ "path": ":models/weapons/g_machn/tris.md2" }) = weapon_machinegun : "Machinegun" []
